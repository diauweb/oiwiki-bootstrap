{"componentChunkName":"component---node-modules-gatsby-theme-oi-wiki-src-templates-doc-js","path":"/lang/csl/iterator/","result":{"data":{"mdx":{"id":"18a04fa5-096c-5e5f-99d6-851fdd6068be","wordCount":{"words":163},"fields":{"slug":"/lang/csl/iterator/","isIndex":false},"excerpt":"在 STL 中，迭代器（Iterator）用来访问和检查 STL 容器中元素的对象，它的行为模式和指针类似，但是它封装了一些有效性检查，并且提供了统一的访问格式。类似的概念在其他很多高级语言中都存在，如 Python 的 __iter__ 函数，C# 的 IEnumerator…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 STL 中，迭代器（Iterator）用来访问和检查 STL 容器中元素的对象，它的行为模式和指针类似，但是它封装了一些有效性检查，并且提供了统一的访问格式。类似的概念在其他很多高级语言中都存在，如 Python 的 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"__iter__"}]},{"type":"text","value":" 函数，C# 的 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"IEnumerator"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"基础使用"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"基础使用"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8","ariaLabel":"基础使用 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"迭代器听起来比较晦涩，其实迭代器本身可以看作一个数据指针。迭代器主要支持两个运算符：自增 ("},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"++"}]},{"type":"text","value":") 和解引用（单目 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 运算符），其中自增用来移动迭代器，解引用可以获取或修改它指向的元素。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"指向某个 "},{"type":"element","tagName":"a","properties":{"href":"./container.md"},"children":[{"type":"text","value":"STL 容器"}]},{"type":"text","value":"  "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"container"}]},{"type":"text","value":" 中元素的迭代器的类型一般为 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"container::iterator"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"迭代器可以用来遍历容器，例如，下面两个 for 循环的效果是一样的："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"cpp"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki","lang-cpp"],"style":"background-color: #FFFFFF"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #267F99"},"children":[{"type":"text","value":"vector"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"> "}]},{"type":"element","tagName":"span","properties":{"style":"color: #795E26"},"children":[{"type":"text","value":"data"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color: #098658"},"children":[{"type":"text","value":"10"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":");"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #AF00DB"},"children":[{"type":"text","value":"for"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" ("}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" i = "}]},{"type":"element","tagName":"span","properties":{"style":"color: #098658"},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"; i < "}]},{"type":"element","tagName":"span","properties":{"style":"color: #001080"},"children":[{"type":"text","value":"data"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"style":"color: #795E26"},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"(); i++)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"  cout << "}]},{"type":"element","tagName":"span","properties":{"style":"color: #001080"},"children":[{"type":"text","value":"data"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"[i] << endl;"}]},{"type":"element","tagName":"span","properties":{"style":"color: #008000"},"children":[{"type":"text","value":"  // 使用下标访问元素"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #AF00DB"},"children":[{"type":"text","value":"for"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" ("}]},{"type":"element","tagName":"span","properties":{"style":"color: #267F99"},"children":[{"type":"text","value":"vector"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":">::iterator iter = "}]},{"type":"element","tagName":"span","properties":{"style":"color: #001080"},"children":[{"type":"text","value":"data"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"style":"color: #795E26"},"children":[{"type":"text","value":"begin"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"(); iter != "}]},{"type":"element","tagName":"span","properties":{"style":"color: #001080"},"children":[{"type":"text","value":"data"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"style":"color: #795E26"},"children":[{"type":"text","value":"end"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"(); iter++)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"  cout << *iter << endl;"}]},{"type":"element","tagName":"span","properties":{"style":"color: #008000"},"children":[{"type":"text","value":"  // 使用迭代器访问元素"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #008000"},"children":[{"type":"text","value":"// 在C++11后可以使用 auto iter = data.begin() 来简化上述代码"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["details"],"header":"???+warning \"`auto` 在竞赛中的使用\"\n","summary":"<p><code>auto</code> 在竞赛中的使用</p>"},"children":[{"type":"element","tagName":"details","properties":{"className":["details-note","details-open"]},"children":[{"type":"element","tagName":"summary","properties":{"className":["summary-note"]},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 在竞赛中的使用"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"大部分选手都喜欢使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 来代替繁琐的迭代器声明。但是需要注意的是，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 需要 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"C++11"}]},{"type":"text","value":" 版本，而 NOI 系列比赛在评测时使用的是 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"C++98"}]},{"type":"text","value":"。"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"NOI 官网上最新的 "},{"type":"element","tagName":"a","properties":{"href":"http://www.noi.cn/gynoi/jsgz/2018-08-13/710465.shtml"},"children":[{"type":"text","value":"NOI 系列活动标准竞赛环境"}]},{"type":"text","value":" 明确了 C++ 编译器版本为 G++ 4.8.4，且编译指令为 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"g++ test.cpp -o test"}]},{"type":"text","value":"，并没有携带 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"--std=c++11"}]},{"type":"text","value":" 参数，而 gcc 从 6.0 版本起才将默认版本修改为 C++14。"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因此，在比赛时使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 时需要注意 CE 爆零的风险。"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"分类"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"分类"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%88%86%E7%B1%BB","ariaLabel":"分类 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 STL 的定义中，迭代器根据其支持的操作依次分为以下几类："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"InputIterator（输入迭代器）：只要求支持拷贝、自增和解引访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"OutputIterator（输出迭代器）：只要求支持拷贝、自增和解引赋值。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"ForwardIterator（向前迭代器）：同时满足 InputIterator 和 OutputIterator 的要求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"BidirectionalIterator（双向迭代器）：在 ForwardIterator 的基础上支持自减（即反向访问）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"RandomAccessIterator（随机访问迭代器）：在 BidirectionalIterator 的基础上支持加减运算和比较运算（即随机访问）。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["details"],"header":"???+note \"为什么输入迭代器叫输入迭代器？\"\n","summary":"<p>为什么输入迭代器叫输入迭代器？</p>"},"children":[{"type":"element","tagName":"details","properties":{"className":["details-note","details-open"]},"children":[{"type":"element","tagName":"summary","properties":{"className":["summary-note"]},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么输入迭代器叫输入迭代器？"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“输入”指的是“可以从迭代器中获取输入”，而“输出”指的是“可以输出到迭代器”。"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“输入”和“输出”的施动者是程序的其它部分，而不是迭代器自身。"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其实这个“分类”并不互斥——一个“类别”是可以包含另一个“类别”的。例如，在要求使用向前迭代器的地方，同样可以使用双向迭代器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不同的 "},{"type":"element","tagName":"a","properties":{"href":"./container.md"},"children":[{"type":"text","value":"STL 容器"}]},{"type":"text","value":" 支持的迭代器类型不同，在使用时需要留意。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"指针满足随机访问迭代器的所有要求，可以当作随机访问迭代器使用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"相关函数"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"相关函数"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0","ariaLabel":"相关函数 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"很多 "},{"type":"element","tagName":"a","properties":{"href":"./algorithm.md"},"children":[{"type":"text","value":"STL 函数"}]},{"type":"text","value":" 都使用迭代器作为参数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"std::advance(it, n)"}]},{"type":"text","value":" 获取迭代器 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" 的增加 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 步的迭代器；若 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 为负数，则尝试获取迭代器的前驱，此时若迭代器不满足双向迭代器，行为未定义。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 C++11 以后可以使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"std::next(it)"}]},{"type":"text","value":" 获取向前迭代器 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" 的后继，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"std::next(it, n)"}]},{"type":"text","value":" 获取向前迭代器 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" 的第 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 个后继。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 C++11 以后可以使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"std::prev(it)"}]},{"type":"text","value":" 获取双向迭代器 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" 的前驱，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"std::prev(it, n)"}]},{"type":"text","value":" 获取双向迭代器 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" 的第 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 个前驱。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"./container.md"},"children":[{"type":"text","value":"STL 容器"}]},{"type":"text","value":" 一般支持从一端或两端开始的访问，以及对 "},{"type":"element","tagName":"a","properties":{"href":"../const.md"},"children":[{"type":"text","value":"const 修饰符"}]},{"type":"text","value":" 的支持。例如容器的 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"begin()"}]},{"type":"text","value":" 函数可以获得指向容器第一个元素的迭代器，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"rbegin()"}]},{"type":"text","value":" 函数可以获得指向容器最后一个元素的反向迭代器，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"cbegin()"}]},{"type":"text","value":" 函数可以获得指向容器第一个元素的 const 迭代器，"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"end()"}]},{"type":"text","value":" 函数可以获得指向容器尾端（“尾端”并不是最后一个元素，可以看作是最后一个元素的后继；“尾端”的前驱是容器里的最后一个元素，其本身不指向任何一个元素）的迭代器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":".anchorLink.before{position:absolute;top:0;left:0;transform:translateX(-100%);padding-right:4px}.anchorLink.after{display:inline-block;padding-left:4px}h1 .anchorLink svg,h2 .anchorLink svg,h3 .anchorLink svg,h4 .anchorLink svg,h5 .anchorLink svg,h6 .anchorLink svg{visibility:hidden}h1 .anchorLink:focus svg,h1:hover .anchorLink svg,h2 .anchorLink:focus svg,h2:hover .anchorLink svg,h3 .anchorLink:focus svg,h3:hover .anchorLink svg,h4 .anchorLink:focus svg,h4:hover .anchorLink svg,h5 .anchorLink:focus svg,h5:hover .anchorLink svg,h6 .anchorLink:focus svg,h6:hover .anchorLink svg{visibility:visible}a.anchor{display:inline-block;position:relative;top:-159px;visibility:hidden}@media only screen and (max-width:1279.95px){a.anchor{top:-101px}}"}]}],"data":{"quirksMode":false}},"headings":[{"value":"基础使用<a className=\"anchor\" id=\"基础使用\"></a>"},{"value":"分类<a className=\"anchor\" id=\"分类\"></a>"},{"value":"相关函数<a className=\"anchor\" id=\"相关函数\"></a>"}],"frontmatter":{"author":"opsiff, Xeonacid, mgt, bit00011011, sbofgayschool, ouuan, Margatroid, Jacob, Ir1d","tags":["lang","csl"],"title":"迭代器","noMeta":null,"noComment":null,"description":null},"toc":{"items":[{"url":"#基础使用","title":"基础使用","level":2},{"url":"#分类","title":"分类","level":2},{"url":"#相关函数","title":"相关函数","level":2}]},"parent":{"relativePath":"lang/csl/iterator.md","modifiedTime":"2021/07/11","birthTime":"2021-07-11T15:32:17.772Z","changeTime":"2021-07-11T15:32:17.772Z"}}},"pageContext":{"id":"18a04fa5-096c-5e5f-99d6-851fdd6068be","previous":{"node":{"fields":{"slug":"/lang/pb-ds/tree/"},"id":"58b0f3e9-56c2-54b7-8cd9-02caf9c6cdf3","frontmatter":{"tags":["lang","pb-ds"],"title":"平衡树"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/lang/pb-ds/tree.md"}},"next":{"node":{"fields":{"slug":"/basic/selection-sort/"},"id":"03f6ca1f-9ccc-5b47-a5f3-b283a0b480c8","frontmatter":{"tags":["basic"],"title":"选择排序"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/basic/selection-sort.md"}}}},"staticQueryHashes":["2462162885","2862490856"]}