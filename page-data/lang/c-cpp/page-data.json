{"componentChunkName":"component---node-modules-gatsby-theme-oi-wiki-src-templates-doc-js","path":"/lang/c-cpp/","result":{"data":{"mdx":{"id":"eb98c6e7-993c-5a25-9856-25199803d39e","wordCount":{"words":183},"fields":{"slug":"/lang/c-cpp/","isIndex":false},"excerpt":"本文介绍 C 与 C++ 之间重要的或者容易忽略的区别。尽管 C++ 几乎是 C 的超集，C/C++ 代码混用一般也没什么问题，但是了解 C/C++ 间比较重要区别可以避免碰到一些奇怪的 bug。如果你是以 C 为主力语言的 OIer，那么本文也能让你更顺利地上手 C++。C…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文介绍 C 与 C++ 之间重要的或者容易忽略的区别。尽管 C++ 几乎是 C 的超集，C/C++ 代码混用一般也没什么问题，但是了解 C/C++ 间比较重要区别可以避免碰到一些奇怪的 bug。如果你是以 C 为主力语言的 OIer，那么本文也能让你更顺利地上手 C++。C++ 相比 C 增加的独特特性可以阅读 "},{"type":"element","tagName":"a","properties":{"href":"./class.md"},"children":[{"type":"text","value":"C++ 进阶"}]},{"type":"text","value":" 部分的教程。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"宏与模板"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"宏与模板"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%AE%8F%E4%B8%8E%E6%A8%A1%E6%9D%BF","ariaLabel":"宏与模板 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"C++ 的模板在设计之初的一个用途就是用来替换宏定义。学会模板编程是从 C 迈向 C++ 的重要一步。模板不同于宏的文字替换，在编译时会得到更全面的编译器检查，便于编写更健全的代码，利用 inline 关键字还能获得编译器充分的优化。模板特性在 C++11 后支持了可变长度的模板参数表，可以用来替代 C 中的可变长度函数并保证类型安全。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"指针与引用"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"指针与引用"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8","ariaLabel":"指针与引用 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"C++ 中你仍然可以使用 C 风格的指针，但是对于变量传递而言，更推荐使用 C++ 的 "},{"type":"element","tagName":"a","properties":{"href":"./reference.md"},"children":[{"type":"text","value":"引用"}]},{"type":"text","value":" 特性来实现类似的功能。由于引用指向的对象不能为空，因此可以避免一些空地址访问的问题。不过指针由于其灵活性，也仍然有其用武之处。值得一提的是，C 中的 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"NULL"}]},{"type":"text","value":" 空指针在 C++11 起有类型安全的替代品 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"nullptr"}]},{"type":"text","value":"。引用和指针之间可以通过 "},{"type":"element","tagName":"a","properties":{"href":"./op.md"},"children":[{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":" 运算符"}]},{"type":"text","value":" 相互转换。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"struct"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"struct"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#struct","ariaLabel":"struct permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"尽管在 C 和 C++ 中都有 struct 的概念，但是他们对应的东西是不能混用的！C 中的 struct 用来描述一种固定的内存组织结构，而 C++ 中的 struct 就是一种类，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"它与类唯一的区别就是它的成员和继承行为默认是 public 的"}]},{"type":"text","value":"，而一般类的默认成员是 private 的。这一点在写 C/C++ 混合代码时尤其致命。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，声明 struct 时 C++ 也不需要像 C 那么繁琐，C 版本："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"c"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki","lang-c"],"style":"background-color: #FFFFFF"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"typedef"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"struct"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"style":"color: #267F99"},"children":[{"type":"text","value":"Node_t"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"{"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"struct"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"style":"color: #267F99"},"children":[{"type":"text","value":"Node_t"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" *next;"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" key;"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"} Node;"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"C++ 版本"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"cpp"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki","lang-cpp"],"style":"background-color: #FFFFFF"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"struct"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"style":"color: #267F99"},"children":[{"type":"text","value":"Node"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" {"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"  Node *next;"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"style":"color: #0000FF"},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":" key;"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["line"]},"children":[{"type":"element","tagName":"span","properties":{"style":"color: #000000"},"children":[{"type":"text","value":"};"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"const"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"const"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#const","ariaLabel":"const permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"const 在 C 中只有限定变量不能修改的功能，而在 C++ 中，由于大量新特性的出现，const 也被赋予的更多用法。C 中的 const 在 C++ 中的继任者是 constexpr，而 C++ 中的 const 的用法请参见 "},{"type":"element","tagName":"a","properties":{"href":"./const.md"},"children":[{"type":"text","value":"常值"}]},{"type":"text","value":" 页面的说明。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"内存分配"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"内存分配"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D","ariaLabel":"内存分配 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"C++ 中新增了 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"delete"}]},{"type":"text","value":" 关键字用来在“自由存储区”上分配空间，这个自由存储区可以是堆也可以是静态存储区，他们是为了配合“类”而出现的。其中 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"delete[]"}]},{"type":"text","value":" 还能够直接释放动态数组的内存，非常方便。"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"delete"}]},{"type":"text","value":" 关键字会调用类型的构造函数和析构函数，相比 C 中的 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"malloc()"}]},{"type":"text","value":"、"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"realloc()"}]},{"type":"text","value":"、"},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"free()"}]},{"type":"text","value":" 函数，他们对类型有更完善的支持，但是效率不如 C 中的这些函数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"简而言之，如果你需要动态分配内存的对象是基础类型或他们的数组，那么你可以使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"malloc()"}]},{"type":"text","value":" 进行更高效的内存分配；但如果你新建的对象是非基础的类型，那么建议使用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" 以获得安全性检查。值得注意的是尽管 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"malloc()"}]},{"type":"text","value":" 都是返回指针，但是 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" 出来的指针 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"只能"}]},{"type":"text","value":" 用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"delete"}]},{"type":"text","value":" 回收，而 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"malloc()"}]},{"type":"text","value":" 出来的指针也只能用 "},{"type":"element","tagName":"inlinecode","properties":{},"children":[{"type":"text","value":"free()"}]},{"type":"text","value":" 回收，否则会有内存泄漏的风险。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":".anchorLink.before{position:absolute;top:0;left:0;transform:translateX(-100%);padding-right:4px}.anchorLink.after{display:inline-block;padding-left:4px}h1 .anchorLink svg,h2 .anchorLink svg,h3 .anchorLink svg,h4 .anchorLink svg,h5 .anchorLink svg,h6 .anchorLink svg{visibility:hidden}h1 .anchorLink:focus svg,h1:hover .anchorLink svg,h2 .anchorLink:focus svg,h2:hover .anchorLink svg,h3 .anchorLink:focus svg,h3:hover .anchorLink svg,h4 .anchorLink:focus svg,h4:hover .anchorLink svg,h5 .anchorLink:focus svg,h5:hover .anchorLink svg,h6 .anchorLink:focus svg,h6:hover .anchorLink svg{visibility:visible}a.anchor{display:inline-block;position:relative;top:-159px;visibility:hidden}@media only screen and (max-width:1279.95px){a.anchor{top:-101px}}"}]}],"data":{"quirksMode":false}},"headings":[{"value":"宏与模板<a className=\"anchor\" id=\"宏与模板\"></a>"},{"value":"指针与引用<a className=\"anchor\" id=\"指针与引用\"></a>"},{"value":"struct<a className=\"anchor\" id=\"struct\"></a>"},{"value":"const<a className=\"anchor\" id=\"const\"></a>"},{"value":"内存分配<a className=\"anchor\" id=\"内存分配\"></a>"}],"frontmatter":{"author":"mgt, Shuhao, Suyun514, Jacob, Xeonacid","tags":["lang"],"title":"C 与 C++ 区别","noMeta":null,"noComment":null,"description":null},"toc":{"items":[{"url":"#宏与模板","title":"宏与模板","level":2},{"url":"#指针与引用","title":"指针与引用","level":2},{"url":"#struct","title":"struct","level":2},{"url":"#const","title":"const","level":2},{"url":"#内存分配","title":"内存分配","level":2}]},"parent":{"relativePath":"lang/c-cpp.md","modifiedTime":"2021/07/11","birthTime":"2021-07-11T15:32:17.772Z","changeTime":"2021-07-11T15:32:17.772Z"}}},"pageContext":{"id":"eb98c6e7-993c-5a25-9856-25199803d39e","next":{"node":{"fields":{"slug":"/lang/csl/"},"id":"5f4b90b0-a12d-547b-802b-9b041494c1e7","frontmatter":{"tags":["lang","csl"],"title":"C++ 标准库简介"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/lang/csl/index.md"}}}},"staticQueryHashes":["2462162885","2862490856"]}